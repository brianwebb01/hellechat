version: '3'
services:
  app:
    build:
      context: .
      dockerfile: ./docker/app.dockerfile
      args:
        FPMPORT: 9000
    image: hellechat/php
    ports:
      - "9000"
    restart: unless-stopped
    tty: true
    working_dir: /var/www
    volumes:
      - ./:/var/www:delegated
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network
    depends_on:
      - mysql

  qworker:
    build:
      context: .
      dockerfile: ./docker/qworker.dockerfile
    restart: unless-stopped
    tty: true
    working_dir: /etc/supervisor/conf.d
    depends_on:
      - mysql
      - redis
    volumes:
      - ./:/var/www:delegated
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./docker/qworker/horizon.conf:/etc/supervisord.conf
    networks:
      - app-network
    command:
      ["/usr/bin/supervisord", "-n", "-c", "/etc/supervisord.conf"]


  cron:
    build:
      context: .
      dockerfile: ./docker/cron.dockerfile
    restart: unless-stopped
    tty: true
    working_dir: /var/www
    depends_on:
      - mysql
      - redis
    volumes:
      - ./:/var/www:delegated
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network
    command:
      ["sh", "/run.sh"]


  nginx:
    image: nginx:alpine
    container_name: nginx
    depends_on:
      - app
      - gotify
    restart: unless-stopped
    tty: true
    environment:
      GOTIFY_APP_PORT: '${GOTIFY_APP_PORT}'
      APP_DOMAIN: '${APP_DOMAIN}'
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - ./docker/nginx/conf.d/default.template.PROD:/etc/nginx/conf.d/default.template
      - ./certbot/www/:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
      - ./docker/nginx/entrypoint.sh:/entrypoint.sh
    networks:
      - app-network
    entrypoint: ["/entrypoint.sh"]
    command: ["nginx", "-g", "daemon off;"]


  # Create Certificates manually:
  # docker-compose run --rm  certbot certonly --webroot --webroot-path /var/www/certbot/ -d example.org
  #
  # Renew Certificates manually
  # docker-compose run --rm certbot renew
  # run in host's crontab with nginx reload using:
  # 0 */12 * * * cd /var/www && docker-compose run --rm certbot renew && docker exec $(sudo docker ps -f name=nginx -q | head -n1) /usr/sbin/nginx -s reload
  certbot:
    image: certbot/certbot:latest
    depends_on:
      - nginx
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    networks:
      - app-network
    environment:
      APP_DOMAIN: '${APP_DOMAIN}'
      APP_DOMAIN_EMAIL: '${APP_DOMAIN_EMAIL}'
    #command: certonly --webroot --webroot-path=/var/www/certbot/ --email $APP_DOMAIN_EMAIL --agree-tos --no-eff-email -d $APP_DOMAIN


  gotify:
    image: gotify/server
    depends_on:
      - mysql
    expose:
        - ${GOTIFY_APP_PORT}
        - ${GOTIFY_APP_PORT_SSL}
    volumes:
        - 'godata:/app/data'
        - ./docker/gotify/config.yml:/etc/gotify/config.yml
    restart: unless-stopped
    networks:
      - app-network
    environment:
      GOTIFY_SERVER_PORT: '${GOTIFY_APP_PORT}'
      GOTIFY_SERVER_SSL_PORT: '${GOTIFY_APP_PORT_SSL}'
      GOTIFY_DEFAULTUSER_NAME: ${GOTIFY_USERNAME}
      GOTIFY_DEFAULTUSER_PASS: ${GOTIFY_PASSWORD}
      GOTIFY_DATABASE_DIALECT: 'mysql'
      GOTIFY_DATABASE_CONNECTION: '${DB_USERNAME}:${DB_PASSWORD}@tcp(mysql:3306)/gotify?charset=utf8&parseTime=True&loc=Local'


  mysql:
    image: 'mysql:8.0'
    container_name: mysql
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    volumes:
      - 'dbdata:/var/lib/mysql'
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
      retries: 3
      timeout: 5s


  redis:
    image: redis:6.2
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - app-network


networks:
  app-network:
    driver: bridge
volumes:
  godata:
    driver: local
  dbdata:
    driver: local